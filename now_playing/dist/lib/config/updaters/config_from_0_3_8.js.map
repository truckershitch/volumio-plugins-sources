{"version":3,"file":"config_from_0_3_8.js","sourceRoot":"","sources":["../../../../src/lib/config/updaters/config_from_0_3_8.ts"],"names":[],"mappings":";;;;;;AAAA,2DAAyE;AACzE,gFAAyC;AAEzC;;;GAGG;AAEH,MAAM,UAAU,GAAG,OAAO,CAAC;AAE3B,SAAgB,MAAM;IACpB,kBAAkB,EAAE,CAAC;IACrB,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,4CAA4C,UAAU,EAAE,CAAC,CAAC;IAC9E,2BAAE,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAC/C,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AACvD,CAAC;AALD,wBAKC;AAED,SAAS,kBAAkB;IACzB;;;;;OAKG;IACH,MAAM,QAAQ,GAAG,2BAAE,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAClD,IAAI,cAAc,CAAC;IACnB,IAAI;QACF,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KACvC;IACD,OAAO,KAAK,EAAE;QACZ,cAAc,GAAG,QAAQ,CAAC;KAC3B;IACD,IAAI,cAAc,KAAK,SAAS;QAC9B,CAAC,OAAO,cAAc,KAAK,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,EAAE;QAC/E,OAAO;KACR;IACD,IAAI,WAAW,GAAyB,IAAI,CAAC;IAC7C,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtC,WAAW,GAAG;YACZ,MAAM,EAAE,cAAc;SACvB,CAAC;KACH;SACI;QACH,0DAA0D;QAC1D,WAAW,GAAG,EAAC,GAAG,yCAAoB,EAAC,CAAC;KACzC;IACD,IAAI,WAAW,EAAE;QACf,2BAAE,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACxC,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,mDAAmD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;KACvG;AACH,CAAC","sourcesContent":["import { DefaultThemeSettings, ThemeSettings } from 'now-playing-common';\nimport np from '../../NowPlayingContext';\n\n/**\n * Update:\n * - `theme`: from string to { active: string; }\n */\n\nconst TO_VERSION = '0.4.0';\n\nexport function update() {\n  updateThemeSetting();\n  np.getLogger().info(`[now-playing] Updating config version to ${TO_VERSION}`);\n  np.setConfigValue('configVersion', TO_VERSION);\n  np.getLogger().info('[now-playing] Update complete');\n}\n\nfunction updateThemeSetting() {\n  /**\n   * Old version has 'theme' value of string type, current is object { active: themeName }.\n   * Here, we test whether theme value is string type and, if so, convert and save it as object.\n   * Because np.getConfigValue() will return default value if JSON parse fails,\n   * we need to test parsing the raw config value ourselves.\n   */\n  const rawValue = np.getConfigValue('theme', true);\n  let tryParsedValue;\n  try {\n    tryParsedValue = JSON.parse(rawValue);\n  }\n  catch (error) {\n    tryParsedValue = rawValue;\n  }\n  if (tryParsedValue === undefined ||\n    (typeof tryParsedValue === 'object' && Reflect.has(tryParsedValue, 'active'))) {\n    return;\n  }\n  let updateValue: ThemeSettings | null = null;\n  if (typeof tryParsedValue === 'string') {\n    updateValue = {\n      active: tryParsedValue\n    };\n  }\n  else {\n    // `rawValue` is unknown type or object, set default value\n    updateValue = {...DefaultThemeSettings};\n  }\n  if (updateValue) {\n    np.setConfigValue('theme', updateValue);\n    np.getLogger().info(`[now-playing] Updated config value for 'theme': ${JSON.stringify(updateValue)}`);\n  }\n}\n"]}