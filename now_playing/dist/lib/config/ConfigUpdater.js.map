{"version":3,"file":"ConfigUpdater.js","sourceRoot":"","sources":["../../../src/lib/config/ConfigUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport fs from 'fs';\nimport np from '../NowPlayingContext';\nimport { getPluginVersion } from '../utils/System';\nimport path from 'path';\n\nconst CONFIG_UPDATER_PATH = path.resolve(`${__dirname}/updaters`);\n\ninterface ConfigUpdaterInfo {\n  path: string;\n  fromVersion: string;\n}\n\nexport default class ConfigUpdater {\n\n  static async checkAndUpdate() {\n    const pluginVersion = getPluginVersion();\n    const configVersion = np.getConfigValue('configVersion');\n\n    if (!pluginVersion) {\n      np.getLogger().error('[now-playing] ConfigUpdater: failed to obtain plugin version. Not going to update config.');\n      return;\n    }\n\n    if (!configVersion) {\n      np.getLogger().info('[now-playing] ConfigUpdater: config version unavailable. Either this is the first time the plugin is installed, or the previous version is < 0.3.0). Config will not be updated.');\n      this.#updateConfigVersion(pluginVersion);\n    }\n    else if (semver.satisfies(pluginVersion, configVersion)) {\n      np.getLogger().info('[now-playing] ConfigUpdater: config is up to date.');\n    }\n    else if (semver.gt(configVersion, pluginVersion)) {\n      np.getLogger().info(`[now-playing] ConfigUpdater: config version is newer than plugin version (${configVersion} > ${pluginVersion}). Config will not be updated.`);\n      this.#updateConfigVersion(pluginVersion);\n    }\n    else if (semver.lt(configVersion, pluginVersion)) {\n      np.getLogger().info(`[now-playing] ConfigUpdater: config version is older than plugin version (${configVersion} < ${pluginVersion}). Will check and apply config updates.`);\n      await this.#updateConfigData(configVersion, pluginVersion);\n    }\n  }\n\n  static #getUpdaters(): ConfigUpdaterInfo[] {\n    const matchRegEx = /config_from_(.*).js$/;\n    return fs.readdirSync(CONFIG_UPDATER_PATH).reduce<ConfigUpdaterInfo[]>((paths, file) => {\n      const matches = file.match(matchRegEx);\n      if (matches) {\n        const _from = matches[1];\n        if (_from) {\n          paths.push({\n            path: path.join(CONFIG_UPDATER_PATH, file),\n            fromVersion: _from.replace(/_/g, '.')\n          });\n        }\n      }\n      return paths;\n    }, [])\n      .sort((up1, up2) => semver.lt(up1.fromVersion, up2.fromVersion) ? -1 : 1);\n  }\n\n  static async #updateConfigData(fromVersion: string, toVersion: string, remainingUpdaters?: ConfigUpdaterInfo[]) {\n    let updaters: ConfigUpdaterInfo[];\n    if (remainingUpdaters) {\n      updaters = remainingUpdaters;\n    }\n    else {\n      try {\n        updaters = this.#getUpdaters();\n      }\n      catch (e) {\n        np.getLogger().error(np.getErrorMessage(`[now-playing] ConfigUpdater: error fetching config updaters from \"${CONFIG_UPDATER_PATH}\":`, e));\n        return;\n      }\n    }\n    const applyIndex = updaters.findIndex((up) => semver.eq(up.fromVersion, fromVersion) || semver.gt(up.fromVersion, fromVersion));\n    const applyUpdater = applyIndex >= 0 ? updaters[applyIndex] : null;\n\n    if (!applyUpdater) {\n      np.getLogger().info(`[now-playing] ConfigUpdater: no ${remainingUpdaters ? 'more ' : ''}config updaters found.`);\n      this.#updateConfigVersion(toVersion);\n\n    }\n    else {\n      np.getLogger().info(`[now-playing] ConfigUpdater: running config updater at \"${applyUpdater.path}\"...`);\n      try {\n        const updater = await import(applyUpdater.path);\n        updater.update();\n      }\n      catch (e) {\n        np.getLogger().error(np.getErrorMessage('[now-playing] ConfigUpdater: error running config updater:', e));\n        return;\n      }\n\n      const updatedVersion = np.getConfigValue('configVersion');\n      if (updatedVersion) {\n        np.getLogger().info(`[now-playing] ConfigUpdater: config version updated to ${updatedVersion}. Checking if there are further updates to be performed...`);\n        this.#updateConfigData(updatedVersion, toVersion, updaters.slice(applyIndex + 1));\n      }\n      else {\n        np.getLogger().error('[now-playing] ConfigUpdater: error reading config version after last update. Aborting update process (config might be corrupt)...');\n\n      }\n    }\n  }\n\n  static #updateConfigVersion(toVersion: string) {\n    np.setConfigValue('configVersion', toVersion);\n    np.getLogger().info(`[now-playing] ConfigUpdater: updated config version to ${toVersion}`);\n  }\n}\n"]}