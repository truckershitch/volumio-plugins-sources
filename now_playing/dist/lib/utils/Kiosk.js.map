{"version":3,"file":"Kiosk.js","sourceRoot":"","sources":["../../../src/lib/utils/Kiosk.ts"],"names":[],"mappings":"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","sourcesContent":["import * as SystemUtils from './System';\nimport np from '../NowPlayingContext';\n\nconst VOLUMIO_KIOSK_PATH = '/opt/volumiokiosk.sh';\nconst VOLUMIO_KIOSK_BAK_PATH = '/home/volumio/.now_playing/volumiokiosk.sh.bak';\nconst VOLUMIO_KIOSK_SERVICE_NAME = 'volumio-kiosk';\n\nexport function checkVolumioKiosk() {\n  try {\n    if (!SystemUtils.fileExists(VOLUMIO_KIOSK_PATH)) {\n      return {\n        exists: false\n      };\n    }\n\n    if (SystemUtils.findInFile(VOLUMIO_KIOSK_PATH, 'localhost:3000')) {\n      return {\n        exists: true,\n        display: 'default'\n      };\n    }\n\n    if (SystemUtils.findInFile(VOLUMIO_KIOSK_PATH, `localhost:${np.getConfigValue('port')}`)) {\n      return {\n        exists: true,\n        display: 'nowPlaying'\n      };\n    }\n\n    return {\n      exists: true,\n      display: 'unknown'\n    };\n\n  }\n  catch (error) {\n    np.getLogger().error(np.getErrorMessage('[now-playing] Error reading Volumio Kiosk script: ', error));\n    np.toast('error', np.getI18n('NOW_PLAYING_KIOSK_CHECK_ERR'));\n    return {\n      exists: false\n    };\n  }\n}\n\nexport function volumioKioskBackupPathExists() {\n  return SystemUtils.fileExists(VOLUMIO_KIOSK_BAK_PATH);\n}\n\nexport async function configureVolumioKiosk(display: 'nowPlaying' | 'default') {\n  let oldPort, newPort;\n  if (display === 'nowPlaying') {\n    oldPort = 3000;\n    newPort = np.getConfigValue('port');\n  }\n  else { // `display` === 'default'\n    oldPort = np.getConfigValue('port');\n    newPort = 3000;\n  }\n\n  await modifyVolumioKioskScript(oldPort, newPort);\n  np.setConfigValue('kioskDisplay', display);\n}\n\nexport async function restoreVolumioKiosk() {\n  if (!volumioKioskBackupPathExists()) {\n    np.toast('error', np.getI18n('NOW_PLAYING_KIOSK_BAK_NOT_FOUND'));\n    return;\n  }\n  try {\n    SystemUtils.copyFile(VOLUMIO_KIOSK_BAK_PATH, VOLUMIO_KIOSK_PATH, { asRoot: true });\n    restartVolumioKioskService();\n  }\n  catch (error) {\n    np.getLogger().error(np.getErrorMessage('[now-playing] Error restoring kiosk script from backup: ', error));\n    np.toast('error', np.getI18n('NOW_PLAYING_KIOSK_RESTORE_BAK_ERR'));\n  }\n}\n\nexport async function modifyVolumioKioskScript(oldPort: number, newPort: number, restartService = true) {\n  try {\n    if (oldPort == 3000) {\n      np.getLogger().info(`[now-playing] Backing up ${VOLUMIO_KIOSK_PATH} to ${VOLUMIO_KIOSK_BAK_PATH}`);\n      SystemUtils.copyFile(VOLUMIO_KIOSK_PATH, VOLUMIO_KIOSK_BAK_PATH, { createDestDirIfNotExists: true });\n    }\n    SystemUtils.replaceInFile(VOLUMIO_KIOSK_PATH, `localhost:${oldPort}`, `localhost:${newPort}`);\n    np.toast('success', np.getI18n('NOW_PLAYING_KIOSK_MODIFIED'));\n  }\n  catch (error: any) {\n    np.getLogger().error(np.getErrorMessage('[now-playing] Error modifying Volumio Kiosk script:', error));\n    np.toast('error', np.getI18n('NOW_PLAYING_KIOSK_MODIFY_ERR'));\n    throw error;\n  }\n\n  if (restartService) {\n    return restartVolumioKioskService();\n  }\n}\n\nexport async function restartVolumioKioskService() {\n  // Restart volumio-kiosk service if it is active\n  const isActive = await SystemUtils.isSystemdServiceActive(VOLUMIO_KIOSK_SERVICE_NAME);\n  if (isActive) {\n    np.toast('info', 'Restarting Volumio Kiosk service...');\n    try {\n      return SystemUtils.restartSystemdService(VOLUMIO_KIOSK_SERVICE_NAME);\n    }\n    catch (error: any) {\n      np.toast('error', 'Failed to restart Volumio Kiosk service.');\n    }\n  }\n}\n"]}